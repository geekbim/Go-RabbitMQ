// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "gokomodo/domain/entity"

	exceptions "gokomodo/pkg/exceptions"

	mock "github.com/stretchr/testify/mock"

	request "gokomodo/internal/delivery/request"

	uuid "github.com/google/uuid"
)

// OrderUseCase is an autogenerated mock type for the OrderUseCase type
type OrderUseCase struct {
	mock.Mock
}

// AcceptOrder provides a mock function with given fields: ctx, userId, orderId
func (_m *OrderUseCase) AcceptOrder(ctx context.Context, userId uuid.UUID, orderId uuid.UUID) (*entity.Order, *exceptions.CustomerError) {
	ret := _m.Called(ctx, userId, orderId)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *entity.Order); ok {
		r0 = rf(ctx, userId, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 *exceptions.CustomerError
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) *exceptions.CustomerError); ok {
		r1 = rf(ctx, userId, orderId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exceptions.CustomerError)
		}
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderUseCase) CreateOrder(ctx context.Context, order *entity.Order) (*entity.Order, *exceptions.CustomerError) {
	ret := _m.Called(ctx, order)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) *entity.Order); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 *exceptions.CustomerError
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Order) *exceptions.CustomerError); ok {
		r1 = rf(ctx, order)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exceptions.CustomerError)
		}
	}

	return r0, r1
}

// ListOrder provides a mock function with given fields: ctx, userId, role, options
func (_m *OrderUseCase) ListOrder(ctx context.Context, userId uuid.UUID, role string, options *request.Option) ([]*entity.Order, int32, *exceptions.CustomerError) {
	ret := _m.Called(ctx, userId, role, options)

	var r0 []*entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *request.Option) []*entity.Order); ok {
		r0 = rf(ctx, userId, role, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *request.Option) int32); ok {
		r1 = rf(ctx, userId, role, options)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 *exceptions.CustomerError
	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, string, *request.Option) *exceptions.CustomerError); ok {
		r2 = rf(ctx, userId, role, options)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*exceptions.CustomerError)
		}
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewOrderUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderUseCase creates a new instance of OrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderUseCase(t mockConstructorTestingTNewOrderUseCase) *OrderUseCase {
	mock := &OrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
