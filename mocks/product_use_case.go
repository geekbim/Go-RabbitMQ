// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "gokomodo/domain/entity"

	exceptions "gokomodo/pkg/exceptions"

	mock "github.com/stretchr/testify/mock"

	request "gokomodo/internal/delivery/request"

	uuid "github.com/google/uuid"
)

// ProductUseCase is an autogenerated mock type for the ProductUseCase type
type ProductUseCase struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *ProductUseCase) CreateProduct(ctx context.Context, product *entity.Product) (*entity.Product, *exceptions.CustomerError) {
	ret := _m.Called(ctx, product)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) *entity.Product); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 *exceptions.CustomerError
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Product) *exceptions.CustomerError); ok {
		r1 = rf(ctx, product)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exceptions.CustomerError)
		}
	}

	return r0, r1
}

// ListProductBuyer provides a mock function with given fields: ctx, options
func (_m *ProductUseCase) ListProductBuyer(ctx context.Context, options *request.Option) ([]*entity.Product, int32, *exceptions.CustomerError) {
	ret := _m.Called(ctx, options)

	var r0 []*entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, *request.Option) []*entity.Product); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, *request.Option) int32); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 *exceptions.CustomerError
	if rf, ok := ret.Get(2).(func(context.Context, *request.Option) *exceptions.CustomerError); ok {
		r2 = rf(ctx, options)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*exceptions.CustomerError)
		}
	}

	return r0, r1, r2
}

// ListProductSeller provides a mock function with given fields: ctx, userId, options
func (_m *ProductUseCase) ListProductSeller(ctx context.Context, userId uuid.UUID, options *request.Option) ([]*entity.Product, int32, *exceptions.CustomerError) {
	ret := _m.Called(ctx, userId, options)

	var r0 []*entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *request.Option) []*entity.Product); ok {
		r0 = rf(ctx, userId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *request.Option) int32); ok {
		r1 = rf(ctx, userId, options)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 *exceptions.CustomerError
	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, *request.Option) *exceptions.CustomerError); ok {
		r2 = rf(ctx, userId, options)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*exceptions.CustomerError)
		}
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewProductUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductUseCase creates a new instance of ProductUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductUseCase(t mockConstructorTestingTNewProductUseCase) *ProductUseCase {
	mock := &ProductUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
