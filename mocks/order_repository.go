// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "gokomodo/domain/entity"

	mock "github.com/stretchr/testify/mock"

	request "gokomodo/internal/delivery/request"

	uuid "github.com/google/uuid"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CountOrderBuyer provides a mock function with given fields: ctx, userId, options
func (_m *OrderRepository) CountOrderBuyer(ctx context.Context, userId uuid.UUID, options *request.Option) (int32, error) {
	ret := _m.Called(ctx, userId, options)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *request.Option) int32); ok {
		r0 = rf(ctx, userId, options)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *request.Option) error); ok {
		r1 = rf(ctx, userId, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountOrderSeller provides a mock function with given fields: ctx, userId, options
func (_m *OrderRepository) CountOrderSeller(ctx context.Context, userId uuid.UUID, options *request.Option) (int32, error) {
	ret := _m.Called(ctx, userId, options)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *request.Option) int32); ok {
		r0 = rf(ctx, userId, options)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *request.Option) error); ok {
		r1 = rf(ctx, userId, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderBySellerIdAndOrderId provides a mock function with given fields: ctx, userId, orderId
func (_m *OrderRepository) FindOrderBySellerIdAndOrderId(ctx context.Context, userId uuid.UUID, orderId uuid.UUID) (*entity.Order, error) {
	ret := _m.Called(ctx, userId, orderId)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *entity.Order); ok {
		r0 = rf(ctx, userId, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userId, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBuyer provides a mock function with given fields: ctx, userId, options
func (_m *OrderRepository) GetOrderBuyer(ctx context.Context, userId uuid.UUID, options *request.Option) ([]*entity.Order, error) {
	ret := _m.Called(ctx, userId, options)

	var r0 []*entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *request.Option) []*entity.Order); ok {
		r0 = rf(ctx, userId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *request.Option) error); ok {
		r1 = rf(ctx, userId, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderSeller provides a mock function with given fields: ctx, userId, options
func (_m *OrderRepository) GetOrderSeller(ctx context.Context, userId uuid.UUID, options *request.Option) ([]*entity.Order, error) {
	ret := _m.Called(ctx, userId, options)

	var r0 []*entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *request.Option) []*entity.Order); ok {
		r0 = rf(ctx, userId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *request.Option) error); ok {
		r1 = rf(ctx, userId, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepository) StoreOrder(ctx context.Context, order *entity.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: ctx, order
func (_m *OrderRepository) UpdateOrderStatus(ctx context.Context, order *entity.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepository(t mockConstructorTestingTNewOrderRepository) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
